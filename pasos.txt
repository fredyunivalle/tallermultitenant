0. Asegurese de tener instalado postgresql 9.2+ y python 3
- Se recomienda crear un ambiente virtual para ejecutar el proyecto
1. pip install -r requirements.txt
2. Crear base de datos (revisar settings.py) llamada "multitenant"
2.1. Actualizar configuración de la base de datos en settings.py (nombre de su usuario y contraseña de su usuario)
3. python manage.py makemigrations
4. python manage.py migrate_schemas
5. ejecutar el siguiente codigo sql (para crear el tenant publico):
	insert into tenant_tenant("schema_name", "nombre_tenant", "descripcion") values 
		('public', 'El nombre de mi tenant', 'La descripcion de mi tenant');
	Nota: El schema_name debe ser public, puesto que es el esquema por defecto que hay en postgres.

6. Ejecutar el siguiente codigo sql (para asociar el dominio/subdominio que tendrá nuestro tenant publico, para este caso sería el dominio: localhost)
	insert into tenant_domain ("domain", "is_primary", "tenant_id") values
		('localhost', true, 1);
	Nota: Para el caso del public no se especifica subdominio, para los tenants si, es decir el campo domain para un tenant debe ser: "nombreTenant.localhost".
	Nota 2: is_primary especifica si este dominio es el dominio principal de nuestro tenant (puede tener varios).

7. python manage.py runserver
8. Acceder a: http://localhost:8000/registrar-tenant/ (se puede cambiar el puerto donde ejecuta), aquí vamos a crear un nuevo tenant
9. Crear el nuevo tenant. "Nombre tenant" será usado en este ejemplo como el subdominio asociado al tenant a crear, es decir, si el "Nombre tenant" es "tenant1" el subdominio asociado será "tenant1.localhost".
10. Ingresamos al nuevo tenant, en nuestro ejemplo: http://tenant1.localhost:8000/registrar-cliente/
11. Registramos un cliente.
12. Ingresamos al public http://localhost:8000/mostrar-clientes/ para ver la información de los clientes en los tenants
13. Ingresamos a la base de datos a la tabla clientes_cliente en el esquema "tenant1" y observamos que se creo el dato para el tenant.